{"version":3,"sources":["components/Navbar.js","components/NoteForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","titleColor","title","type","id","href","class","style","marginLeft","onClick","toggleMode","for","NoteForm","useState","text","setText","colorTxt","value","onChange","event","console","log","target","placeholder","htmlFor","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","i","arr1","toString","split","length","vv","charAt","slice","mm","replace","joinedWords","reverse","join","nText","color","App","setMode","NavTextColor","setNavTextColor","NoteColor","setNoteColor","txtColor","setTxtColor","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c8075358.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-light ${props.mode} sticky-top`}>\r\n                <div className=\"container-fluid\">\r\n                    <div className={`navbar-brand ${props.titleColor}`}>{props.title}</div>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div className=\"navbar-nav ml-auto\">\r\n                            <a className={`nav-link ${props.titleColor}`} href=\"#\">Home</a>\r\n                        <div class=\"form-check form-switch nav-link\" style={{marginLeft: '40px'}}>\r\n                            <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n                            <label class={`form-check-label ${props.titleColor}`} for=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title:  PropTypes.string.isRequired,\r\n    newNote: PropTypes.string.isRequired\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function NoteForm(props) {\r\n    const handleUp = () => {\r\n        setText(text.toUpperCase())\r\n    }\r\n\r\n    const handleLow = () => {\r\n        setText(text.toLowerCase())\r\n    }\r\n\r\n    const OnChange = (event) => {\r\n        console.log(\"change\");\r\n        setText(event.target.value)\r\n    }\r\n    const handleClear = (event) => {\r\n        setText('')\r\n    }\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"floatingTextarea\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n    const capOnclick = () =>{       \r\n        let arr1 = text.toString().split(\" \");\r\n        let i;\r\n        for(i=0;i<arr1.length;i++){\r\n        \r\n            let vv=arr1[i].charAt(0).toUpperCase() + arr1[i].slice(1);\r\n            arr1[i]=vv;\r\n        }\r\n            let mm=arr1.toString().replace(/,/g,\" \");\r\n                setText(mm);\r\n    }\r\n    const reversed = () => {\r\n        let splitWord = text.split(\"\");\r\n    \r\n        let reverseWord = splitWord.reverse(\"\");\r\n        let joinedWords = reverseWord.join(\"\");\r\n        let newText = joinedWords\r\n    \r\n        setText(newText);\r\n      };\r\n\r\n    const trim = () => {\r\n        let nText = text.split(/[ ]+/);\r\n        setText(nText.join(\" \"))\r\n    }\r\n\r\n    const [text, setText] = useState('')\r\n\r\n    return (\r\n        <>\r\n        <div className=\"form-floating\">\r\n            <textarea className={`form-control ${props.colorTxt}`} value={text} onChange={OnChange} placeholder=\"Make a Note\" id=\"floatingTextarea\"></textarea>\r\n            <label htmlFor=\"floatingTextarea\" id=\"labelfornote\">Make a Note</label>\r\n        </div>\r\n        <ul className=\"text-opers\">\r\n            <li className=\"text-oper\">\r\n                <button className=\"btn btn-manu\" onClick={handleUp}>Uppercase</button>\r\n            </li>\r\n            <li className=\"text-oper\">\r\n                <button className=\"btn btn-manu\" onClick={handleLow}>Lowercase</button>\r\n            </li>\r\n            <li className=\"text-oper\">\r\n                <button className=\"btn btn-manu\" onClick={handleClear}>Clear text</button>\r\n            </li>\r\n            <li className=\"text-oper\">\r\n                <button className=\"btn btn-manu\" onClick={handleCopy}>Copy to clipboard</button>\r\n            </li>\r\n            <li className=\"text-oper\">\r\n                <button className=\"btn btn-manu\" onClick={capOnclick}>Camel</button>\r\n            </li>\r\n            <li className=\"text-oper\">\r\n                <button className=\"btn btn-manu\" onClick={reversed}>Reverse</button>\r\n            </li>\r\n            <li className=\"text-oper\">\r\n                <button className=\"btn btn-manu\" onClick={trim}>Trim text</button>\r\n            </li>\r\n        </ul>\r\n        <div className=\"contain\">\r\n            <h1 class={`${props.color}`}>Your Text Summary</h1>\r\n            <p class={`${props.color}`}>{text.split(\" \").length} words, {text.length} characters</p>\r\n            <p class={`${props.color}`}>{0.008*text.split(\" \").length} mins to read (0.008 mins/word)</p>\r\n            <p style={{color: \"grey !important\", marginLeft: '50rem'}} className=\"disabled\">by indrayudhchakraborty</p>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n","import Navbar from './components/Navbar';\nimport NoteForm from './components/NoteForm';\nimport React, { useState } from 'react'\n\n\nimport './App.css';\n\nfunction App() {\n  const [mode, setMode] = useState('bg-white');\n  const [NavTextColor, setNavTextColor] = useState('lighty')\n  const [NoteColor, setNoteColor] = useState('lightyNote')\n  const [txtColor, setTxtColor] = useState('lightyTxt')\n\n\n  const toggleMode = () => {\n    if (mode === 'bg-white') {\n      setMode('bg-darky');\n      setNavTextColor('darky');\n      setNoteColor(\"darkyNote\");\n      document.body.style.backgroundColor = '#18191A'\n      setTxtColor('darkyTxt')\n    }\n    else{\n      setMode('bg-white');\n      setNavTextColor('lighty');\n      setNoteColor(\"lightyNote\");\n      document.body.style.backgroundColor = '#fff'\n      setTxtColor('lightyTxt')\n    }\n  }\n  return (\n    <>\n    <div className=\"App\">\n      <Navbar title=\"ManuScript\" mode={mode} titleColor={NavTextColor} toggleMode={toggleMode}/>\n      <div className=\"container\">\n         <NoteForm color={NoteColor} colorTxt={txtColor}/>\n        </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}